From 4ba833529b32fcb6f1819ecc6354b0e5a78896a6 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Fri, 3 Feb 2023 09:28:35 +0800
Subject: [PATCH] add xyz/openbmc_project/Sensor/Aggregation/ for
 phosphor-power

Upstream-Status: Inappropriate [oe-specific]

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 .../Aggregation/History/Average/meson.build   | 34 +++++++++++
 .../Aggregation/History/Maximum/meson.build   | 34 +++++++++++
 .../Sensor/Aggregation/History/meson.build    | 41 +++++++++++++
 .../Sensor/Aggregation/meson.build            |  2 +
 gen/xyz/openbmc_project/Sensor/meson.build    |  2 +
 .../History/Average.interface.yaml            | 57 +++++++++++++++++++
 .../History/Maximum.interface.yaml            | 57 +++++++++++++++++++
 7 files changed, 227 insertions(+)
 create mode 100644 gen/xyz/openbmc_project/Sensor/Aggregation/History/Average/meson.build
 create mode 100644 gen/xyz/openbmc_project/Sensor/Aggregation/History/Maximum/meson.build
 create mode 100644 gen/xyz/openbmc_project/Sensor/Aggregation/History/meson.build
 create mode 100644 gen/xyz/openbmc_project/Sensor/Aggregation/meson.build
 create mode 100644 yaml/xyz/openbmc_project/Sensor/Aggregation/History/Average.interface.yaml
 create mode 100644 yaml/xyz/openbmc_project/Sensor/Aggregation/History/Maximum.interface.yaml

diff --git a/gen/xyz/openbmc_project/Sensor/Aggregation/History/Average/meson.build b/gen/xyz/openbmc_project/Sensor/Aggregation/History/Average/meson.build
new file mode 100644
index 000000000..0884cba4a
--- /dev/null
+++ b/gen/xyz/openbmc_project/Sensor/Aggregation/History/Average/meson.build
@@ -0,0 +1,34 @@
+# Generated file; do not modify.
+
+sdbusplus_current_path = 'xyz/openbmc_project/Sensor/Aggregation/History/Average'
+
+generated_sources += custom_target(
+    'xyz/openbmc_project/Sensor/Aggregation/History/Average__cpp'.underscorify(),
+    input: [ 
+        '../../../../../../../yaml/xyz/openbmc_project/Sensor/Aggregation/History/Average.interface.yaml',
+    ],
+    output: [
+        'common.hpp',
+        'server.cpp',
+        'server.hpp',
+        'client.hpp',
+        'aserver.hpp',
+    ],
+    depend_files: sdbusplusplus_depfiles,
+    command: [
+        sdbuspp_gen_meson_prog, '--command', 'cpp',
+        '--output', meson.current_build_dir(),
+        '--tool', sdbusplusplus_prog,
+        '--directory', meson.current_source_dir() / '../../../../../../../yaml',
+        'xyz/openbmc_project/Sensor/Aggregation/History/Average',
+    ],
+    install: should_generate_cpp,
+    install_dir: [
+        get_option('includedir') / sdbusplus_current_path,
+        false,
+        get_option('includedir') / sdbusplus_current_path,
+        get_option('includedir') / sdbusplus_current_path,
+        get_option('includedir') / sdbusplus_current_path,
+    ],
+    build_by_default: should_generate_cpp,
+)
diff --git a/gen/xyz/openbmc_project/Sensor/Aggregation/History/Maximum/meson.build b/gen/xyz/openbmc_project/Sensor/Aggregation/History/Maximum/meson.build
new file mode 100644
index 000000000..1a349ff36
--- /dev/null
+++ b/gen/xyz/openbmc_project/Sensor/Aggregation/History/Maximum/meson.build
@@ -0,0 +1,34 @@
+# Generated file; do not modify.
+
+sdbusplus_current_path = 'xyz/openbmc_project/Sensor/Aggregation/History/Maximum'
+
+generated_sources += custom_target(
+    'xyz/openbmc_project/Sensor/Aggregation/History/Maximum__cpp'.underscorify(),
+    input: [
+        '../../../../../../../yaml/xyz/openbmc_project/Sensor/Aggregation/History/Maximum.interface.yaml',
+    ],
+    output: [
+        'common.hpp',
+        'server.cpp',
+        'server.hpp',
+        'client.hpp',
+        'aserver.hpp',
+    ],
+    depend_files: sdbusplusplus_depfiles,
+    command: [
+        sdbuspp_gen_meson_prog, '--command', 'cpp',
+        '--output', meson.current_build_dir(),
+        '--tool', sdbusplusplus_prog,
+        '--directory', meson.current_source_dir() / '../../../../../../../yaml',
+        'xyz/openbmc_project/Sensor/Aggregation/History/Maximum',
+    ],
+    install: should_generate_cpp,
+    install_dir: [
+        get_option('includedir') / sdbusplus_current_path,
+        false,
+        get_option('includedir') / sdbusplus_current_path,
+        get_option('includedir') / sdbusplus_current_path,
+        get_option('includedir') / sdbusplus_current_path,
+    ],
+    build_by_default: should_generate_cpp,
+)
diff --git a/gen/xyz/openbmc_project/Sensor/Aggregation/History/meson.build b/gen/xyz/openbmc_project/Sensor/Aggregation/History/meson.build
new file mode 100644
index 000000000..433c7ef4f
--- /dev/null
+++ b/gen/xyz/openbmc_project/Sensor/Aggregation/History/meson.build
@@ -0,0 +1,41 @@
+# Generated file; do not modify.
+subdir('Average')
+
+sdbusplus_current_path = 'xyz/openbmc_project/Sensor/Aggregation/History/Average'
+
+generated_markdown += custom_target(
+    'xyz/openbmc_project/Sensor/Aggregation/History/Average__markdown'.underscorify(),
+    input: [ '../../../../../../yaml/xyz/openbmc_project/Sensor/Aggregation/History/Average.interface.yaml',  ],
+    output: [ 'Average.md' ],
+    depend_files: sdbusplusplus_depfiles,
+    command: [
+        sdbuspp_gen_meson_prog, '--command', 'markdown',
+        '--output', meson.current_build_dir(),
+        '--tool', sdbusplusplus_prog,
+        '--directory', meson.current_source_dir() / '../../../../../../yaml',
+        'xyz/openbmc_project/Sensor/Aggregation/History/Average',
+    ],
+    install: should_generate_markdown,
+    install_dir: [inst_markdown_dir / sdbusplus_current_path],
+    build_by_default: should_generate_markdown,
+)
+
+subdir('Maximum')
+
+generated_markdown += custom_target(
+    'xyz/openbmc_project/Sensor/Aggregation/History/Maximum__markdown'.underscorify(),
+    input: [ '../../../../../../yaml/xyz/openbmc_project/Sensor/Aggregation/History/Maximum.interface.yaml',  ],
+    output: [ 'Maximum.md' ],
+    depend_files: sdbusplusplus_depfiles,
+    command: [
+        sdbuspp_gen_meson_prog, '--command', 'markdown',
+        '--output', meson.current_build_dir(),
+        '--tool', sdbusplusplus_prog,
+        '--directory', meson.current_source_dir() / '../../../../../../yaml',
+        'xyz/openbmc_project/Sensor/Aggregation/History/Maximum',
+    ],
+    install: should_generate_markdown,
+    install_dir: [inst_markdown_dir / sdbusplus_current_path],
+    build_by_default: should_generate_markdown,
+)
+
diff --git a/gen/xyz/openbmc_project/Sensor/Aggregation/meson.build b/gen/xyz/openbmc_project/Sensor/Aggregation/meson.build
new file mode 100644
index 000000000..44572fc18
--- /dev/null
+++ b/gen/xyz/openbmc_project/Sensor/Aggregation/meson.build
@@ -0,0 +1,2 @@
+# Generated file; do not modify.
+subdir('History')
diff --git a/gen/xyz/openbmc_project/Sensor/meson.build b/gen/xyz/openbmc_project/Sensor/meson.build
index d9fe313d8..0f17616b6 100644
--- a/gen/xyz/openbmc_project/Sensor/meson.build
+++ b/gen/xyz/openbmc_project/Sensor/meson.build
@@ -109,3 +109,5 @@ generated_markdown += custom_target(
     build_by_default: should_generate_markdown,
 )
 
+subdir('Aggregation')
+
diff --git a/yaml/xyz/openbmc_project/Sensor/Aggregation/History/Average.interface.yaml b/yaml/xyz/openbmc_project/Sensor/Aggregation/History/Average.interface.yaml
new file mode 100644
index 000000000..1d6e89fbe
--- /dev/null
+++ b/yaml/xyz/openbmc_project/Sensor/Aggregation/History/Average.interface.yaml
@@ -0,0 +1,57 @@
+description: >
+    Implement to provide an object that contains a history of averages.  The
+    object this interface is placed on should provide information about the
+    duration the average is calculated over.
+
+properties:
+    - name: Scale
+      type: int64
+      description: >
+          The reading scaling factor N, where the actual reading is value *
+          10^N. This is immutable once set.
+
+    - name: Unit
+      type: enum[self.Unit]
+      description: >
+          The unit of the reading.  Immutable once set for a sensor. For objects
+          in the temperature namespace, Unit must be "DegreesC". For objects in
+          the fan_tach namespace, Unit must be "RPMS". For objects in the
+          voltage namespace, Unit must be "Volts". For objects in the altitude
+          namespace, Unit must be "Meters". For objects in the current
+          namespace, Unit must be "Amperes". For objects in the power namespace,
+          Unit must be "Watts". For objects in the energy namespace, Unit must
+          be "Joules".
+
+    - name: Values
+      type: array[struct[uint64,int64]]
+      description: >
+          An array of timestamp, average value tuples.  The timestamp is the
+          number of milliseconds since 1970.  The entries in the array will
+          always be ordered from newest to oldest.
+
+enumerations:
+    - name: Unit
+      description: >
+          A sensor reading unit.
+      values:
+          - name: DegreesC
+            description: >
+                Temperature as degrees Celsius.
+          - name: RPMS
+            description: >
+                Frequency of rotation as revolutions per minute.
+          - name: Volts
+            description: >
+                Electromotive force as volts.
+          - name: Meters
+            description: >
+                Length as meters.
+          - name: Amperes
+            description: >
+                Electrical charge flow rate as Amperes.
+          - name: Watts
+            description: >
+                Rate of energy transfer as Watts.
+          - name: Joules
+            description: >
+                Energy transfer as Joules.
diff --git a/yaml/xyz/openbmc_project/Sensor/Aggregation/History/Maximum.interface.yaml b/yaml/xyz/openbmc_project/Sensor/Aggregation/History/Maximum.interface.yaml
new file mode 100644
index 000000000..92adeae11
--- /dev/null
+++ b/yaml/xyz/openbmc_project/Sensor/Aggregation/History/Maximum.interface.yaml
@@ -0,0 +1,57 @@
+description: >
+    Implement to provide an object that contains a history of maximum values.
+    The values are the maximum values within a time period.  The object this
+    interface is placed on should provide information about the time period.
+
+properties:
+    - name: Scale
+      type: int64
+      description: >
+          The reading scaling factor N, where the actual reading is value *
+          10^N. This is immutable once set.
+
+    - name: Unit
+      type: enum[self.Unit]
+      description: >
+          The unit of the reading.  Immutable once set for a sensor. For objects
+          in the temperature namespace, Unit must be "DegreesC". For objects in
+          the fan_tach namespace, Unit must be "RPMS". For objects in the
+          voltage namespace, Unit must be "Volts". For objects in the altitude
+          namespace, Unit must be "Meters". For objects in the current
+          namespace, Unit must be "Amperes". For objects in the power namespace,
+          Unit must be "Watts". For objects in the energy namespace, Unit must
+          be "Joules".
+
+    - name: Values
+      type: array[struct[uint64,int64]]
+      description: >
+          An array of timestamp, maximum value tuples.  The timestamp is the
+          number of milliseconds since 1970.  The entries in the array will
+          always be ordered from newest to oldest.
+
+enumerations:
+    - name: Unit
+      description: >
+          A sensor reading unit.
+      values:
+          - name: DegreesC
+            description: >
+                Temperature as degrees Celsius.
+          - name: RPMS
+            description: >
+                Frequency of rotation as revolutions per minute.
+          - name: Volts
+            description: >
+                Electromotive force as volts.
+          - name: Meters
+            description: >
+                Length as meters.
+          - name: Amperes
+            description: >
+                Electrical charge flow rate as Amperes.
+          - name: Watts
+            description: >
+                Rate of energy transfer as Watts.
+          - name: Joules
+            description: >
+                Energy transfer as Joules.
-- 
2.43.0

